{:rename-macros {}, :renames {}, :externs {Date {}, setInterval {}, document {getElementById {}}}, :use-macros {}, :excludes #{}, :name simple.core, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, rf re-frame.core, re-frame.core re-frame.core, str clojure.string, clojure.string clojure.string}, :cljs.spec/speced-vars [], :uses nil, :defs {dispatch-timer-event {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 11, :column 7, :end-line 11, :end-column 27, :arglists (quote ([]))}, :name simple.core/dispatch-timer-event, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, do-timer {:name simple.core/do-timer, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 19, :column 1, :end-line 19, :end-column 18, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 19, :column 10, :end-line 19, :end-column 18}, :tag js}, clock {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 84, :column 7, :end-line 84, :end-column 12, :arglists (quote ([]))}, :name simple.core/clock, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, color-input {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 93, :column 7, :end-line 93, :end-column 18, :arglists (quote ([]))}, :name simple.core/color-input, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, cell {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([index]))}, :name simple.core/cell, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 11, :method-params ([index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([index]))}, cell-row {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 105, :column 7, :end-line 105, :end-column 15, :arglists (quote ([row columns]))}, :name simple.core/cell-row, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 15, :method-params ([row columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([row columns]))}, board {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 113, :column 7, :end-line 113, :end-column 12, :arglists (quote ([rows-columns]))}, :name simple.core/board, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 12, :method-params ([rows-columns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rows-columns]))}, ui {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 121, :column 7, :end-line 121, :end-column 9, :arglists (quote ([]))}, :name simple.core/ui, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 9, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :line 129, :column 16, :end-line 129, :end-column 19, :export true, :arglists (quote ([]))}, :name simple.core/run, :variadic false, :file "C:\\dev\\resources\\re-frame\\examples\\simple\\src\\simple\\core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:div.example-clock X cell :color :key :timer :button.square row :<- :mark :value :time :type O :on-click :style :div :time-color-change :initialize :other-mark :div.board-row :input :time-color :div.color-input :h1 :on-change :cell-values :cell}, :order [:timer :initialize :time :time-color :cell-values :mark :other-mark X O :time-color-change :cell :<- :div.example-clock :style :color :div.color-input :input :type :value :on-change :button.square :on-click :div.board-row :key cell :div row :h1]}, :doc nil}